name: CI/CD to EC2

on:
  push:
    branches:
      - develop
      - main

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: 자바 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Gradle 캐싱
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Resource 폴더 생성
        run: mkdir -p ./src/main/resources/

      - name: properties 생성
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties

      - name: 테스트 없는 Build
        run: ./gradlew build -x test

  deploy:
    if: startsWith(github.ref, 'refs/heads/main')  # main 브랜치에서만 실행
    runs-on: ubuntu-latest
    needs: ci  # ci 작업이 먼저 실행되고 나서 deploy 실행

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Docker 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker 이미지 빌드
        run: docker build -t ${{ secrets.DOCKER_USERNAME}}/${{ secrets.PROJECT_NAME }} .

      - name: DockerHub 푸쉬
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}

      - name: 메인서버 배포
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo docker stop $(docker ps -q)
            sudo docker rm $(docker ps -a -q)
            sudo docker rmi $(docker images -q)
            sudo docker volume prune -f
            sudo docker network prune -f
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
            sudo docker run -p 80:8080 \
            --name ${{ secrets.PROJECT_NAME }} \
            -d ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
