name: CI/CD

on:
  push:
    branches:
      - develop
      - main

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: 자바 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Gradle 캐시 삭제 (깨진 캐시 방지)
        run: rm -rf ~/.gradle/wrapper/dists && rm -rf ~/.gradle/caches

      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Resource 폴더 생성
        run: mkdir -p ./src/main/resources/

      - name: properties 생성
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties

      - name: Gradle 빌드 (타임아웃 60초 설정)
        timeout-minutes: 20
        run: ./gradlew build -x test --no-daemon -Dorg.gradle.wrapperTimeout=60000

      - name: 아티팩트 업로드
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: app-artifact
          path: ./build/libs/*.jar


  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-artifact

      - name: List the downloaded files
        run: |
          ls -al ./  # 다운로드된 파일이 있는 디렉토리 확인

      - name: Create app-artifact directory
        run: |
          mkdir -p app-artifact  # 디렉토리 생성

      - name: Move JAR file to app-artifact
        run: |
          mv *.jar app-artifact/  # JAR 파일을 app-artifact 디렉토리로 이동

      - name: Docker 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker 이미지 빌드
        run: |
          docker build -f Dockerfile.prod -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }} .
          

      - name: DockerHub 푸쉬
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}

      - name: Run Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu
            echo "Current directory: $(pwd)"
            ls -l
            if [ -f "docker-compose.yml" ]; then
              echo "docker-compose.yml found. Proceeding..."
              sudo docker-compose -f docker-compose.yml down
              sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
              # sudo docker compose pull
              sudo docker-compose -f docker-compose.yml up -d
            else
              echo "docker-compose.yml not found."
              exit 1
            fi
