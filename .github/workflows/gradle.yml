name: CI/CD to EC2

on:
  push:
    branches:
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 자바 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Gradle 캐싱
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Resource 폴더 생성
        run: mkdir -p ./src/main/resources/

      - name: properties 생성
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties

      - name: 테스트 없는 Build
        run: ./gradlew build -x test
        
      - name: Docker 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

     
      - name: Docker 이미지 빌드
        run: docker build -t ${{ secrets.DOCKER_USERNAME}}/${{ secrets.PROJECT_NAME }} .
        
      - name: DockerHub 푸쉬
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}

    
      - name: 메인서버 배포
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 기존에 실행 중인 컨테이너 중지 및 삭제
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080")
        
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
        
            # 이전 이미지를 삭제 (이미지 이름에 old_version 태그가 있다면)
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}:old_version || true
        
            # 새로운 이미지 다운로드
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
        
            # 새로운 컨테이너 실행
            sudo docker run -d -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
  
  
    
